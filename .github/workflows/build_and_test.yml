name: Build and Release Midi Hero

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
        - name: Linux
          os: ubuntu-22.04
          pluginval-binary: ./pluginval
          extra-flags: -G Ninja
        - name: macOS
          os: macos-14
          pluginval-binary: pluginval.app/Contents/MacOS/pluginval
          extra-flags: -G Ninja -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
        - name: Windows
          os: windows-latest
          pluginval-binary: ./pluginval.exe
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
#          fetch-depth: 0  # Required for GitVersion to detect history properly

#      - name: Install GitVersion
#        uses: GitTools/actions/gitversion/setup@v0
#        with:
#          versionSpec: 5.2.0

#      - name: Determine Version
#        id: gitversion
#        uses: GitTools/actions/gitversion/execute@v0

      - name: Cache CMake & JUCE Object Files
        uses: actions/cache@v4
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
            build/JUCE/CMakeFiles
          key: ${{ runner.os }}-juce-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-juce-

      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb ninja-build
          sudo /usr/bin/Xvfb $DISPLAY &

      - name: Set up Clang
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1

      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      - name: Configure CMake
        run: cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DVERSION=0.0.4 #${#{ steps.gitversion.outputs.SemVer }}

      - name: Build Project
        run: cmake --build build --config Release --parallel

#      - name: Run Tests
#        run: ctest --test-dir build --output-on-failure

      - name: Check for Artifact Publish Trigger
        id: check_artifact
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[publish-artifacts]"* ]]; then
            echo "UPLOAD_ARTIFACTS=true" >> $GITHUB_ENV
          else
            echo "UPLOAD_ARTIFACTS=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Upload Artifacts (Only If Triggered)
        if: env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: midi-hero-${{ matrix.os }}
          path: |
            build/MidiHero_artefacts/Release/VST3/Midi Hero.vst3/
            build/MidiHero_artefacts/Release/AU/Midi Hero.component/

  release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

#      - name: Install GitVersion
#        uses: GitTools/actions/gitversion/setup@v0
#        with:
#          versionSpec: 5.2.0

#      - name: Determine Version
#        id: gitversion
#        uses: GitTools/actions/gitversion/execute@v0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v0.0.4 #v${#{ steps.gitversion.outputs.SemVer }}
          name: "Midi Hero v0.0.4" #${#{ steps.gitversion.outputs.SemVer }}
          body: "Automated release of Midi Hero."
          draft: false
          prerelease: false
          files: artifacts/midi-hero-*/**/*
